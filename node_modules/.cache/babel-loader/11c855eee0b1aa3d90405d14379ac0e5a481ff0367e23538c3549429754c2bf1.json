{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  interviews: {}\n};\nconst interviewSlice = createSlice({\n  name: 'interviews',\n  initialState,\n  reducers: {\n    startInterview: (state, action) => {\n      state.interviews[action.payload.candidateId] = action.payload;\n    },\n    updateInterview: (state, action) => {\n      const {\n        candidateId,\n        ...updates\n      } = action.payload;\n      if (state.interviews[candidateId]) {\n        state.interviews[candidateId] = {\n          ...state.interviews[candidateId],\n          ...updates\n        };\n      }\n    },\n    addAnswer: (state, action) => {\n      const {\n        candidateId,\n        answer\n      } = action.payload;\n      if (state.interviews[candidateId]) {\n        state.interviews[candidateId].answers.push(answer);\n      }\n    },\n    updateAnswer: (state, action) => {\n      const {\n        candidateId,\n        questionId,\n        score\n      } = action.payload;\n      if (state.interviews[candidateId]) {\n        const answerIndex = state.interviews[candidateId].answers.findIndex(a => a.questionId === questionId);\n        if (answerIndex !== -1) {\n          state.interviews[candidateId].answers[answerIndex].score = score;\n        }\n      }\n    },\n    pauseInterview: (state, action) => {\n      const candidateId = action.payload;\n      if (state.interviews[candidateId]) {\n        state.interviews[candidateId].isPaused = true;\n      }\n    },\n    resumeInterview: (state, action) => {\n      const candidateId = action.payload;\n      if (state.interviews[candidateId]) {\n        state.interviews[candidateId].isPaused = false;\n      }\n    },\n    completeInterview: (state, action) => {\n      const candidateId = action.payload;\n      if (state.interviews[candidateId]) {\n        state.interviews[candidateId].endTime = new Date();\n      }\n    },\n    deleteInterview: (state, action) => {\n      delete state.interviews[action.payload];\n    }\n  }\n});\nexport const {\n  startInterview,\n  updateInterview,\n  addAnswer,\n  updateAnswer,\n  pauseInterview,\n  resumeInterview,\n  completeInterview,\n  deleteInterview\n} = interviewSlice.actions;\nexport default interviewSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","interviews","interviewSlice","name","reducers","startInterview","state","action","payload","candidateId","updateInterview","updates","addAnswer","answer","answers","push","updateAnswer","questionId","score","answerIndex","findIndex","a","pauseInterview","isPaused","resumeInterview","completeInterview","endTime","Date","deleteInterview","actions","reducer"],"sources":["C:/swipe_Assessmentme/src/store/slices/interviewSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  interviews: {}\r\n};\r\n\r\nconst interviewSlice = createSlice({\r\n  name: 'interviews',\r\n  initialState,\r\n  reducers: {\r\n    startInterview: (state, action) => {\r\n      state.interviews[action.payload.candidateId] = action.payload;\r\n    },\r\n    updateInterview: (state, action) => {\r\n      const { candidateId, ...updates } = action.payload;\r\n      if (state.interviews[candidateId]) {\r\n        state.interviews[candidateId] = { ...state.interviews[candidateId], ...updates };\r\n      }\r\n    },\r\n    addAnswer: (state, action) => {\r\n      const { candidateId, answer } = action.payload;\r\n      if (state.interviews[candidateId]) {\r\n        state.interviews[candidateId].answers.push(answer);\r\n      }\r\n    },\r\n    updateAnswer: (state, action) => {\r\n      const { candidateId, questionId, score } = action.payload;\r\n      if (state.interviews[candidateId]) {\r\n        const answerIndex = state.interviews[candidateId].answers.findIndex(a => a.questionId === questionId);\r\n        if (answerIndex !== -1) {\r\n          state.interviews[candidateId].answers[answerIndex].score = score;\r\n        }\r\n      }\r\n    },\r\n    pauseInterview: (state, action) => {\r\n      const candidateId = action.payload;\r\n      if (state.interviews[candidateId]) {\r\n        state.interviews[candidateId].isPaused = true;\r\n      }\r\n    },\r\n    resumeInterview: (state, action) => {\r\n      const candidateId = action.payload;\r\n      if (state.interviews[candidateId]) {\r\n        state.interviews[candidateId].isPaused = false;\r\n      }\r\n    },\r\n    completeInterview: (state, action) => {\r\n      const candidateId = action.payload;\r\n      if (state.interviews[candidateId]) {\r\n        state.interviews[candidateId].endTime = new Date();\r\n      }\r\n    },\r\n    deleteInterview: (state, action) => {\r\n      delete state.interviews[action.payload];\r\n    }\r\n  }\r\n});\r\n\r\nexport const {\r\n  startInterview,\r\n  updateInterview,\r\n  addAnswer,\r\n  updateAnswer,\r\n  pauseInterview,\r\n  resumeInterview,\r\n  completeInterview,\r\n  deleteInterview\r\n} = interviewSlice.actions;\r\n\r\nexport default interviewSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}