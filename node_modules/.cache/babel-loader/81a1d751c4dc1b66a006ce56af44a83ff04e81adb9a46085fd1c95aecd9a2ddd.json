{"ast":null,"code":"import * as pdfjsLib from 'pdfjs-dist';\nimport mammoth from 'mammoth';\n// Configure PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\nexport const extractTextFromPDF = async file => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdf = await pdfjsLib.getDocument({\n        data: arrayBuffer\n      }).promise;\n      let fullText = '';\n      for (let i = 1; i <= pdf.numPages; i++) {\n        const page = await pdf.getPage(i);\n        const textContent = await page.getTextContent();\n        const pageText = textContent.items.map(item => item.str).join(' ');\n        fullText += pageText + '\\n';\n      }\n      resolve(fullText);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const extractTextFromDOCX = async file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = async () => {\n      try {\n        const arrayBuffer = reader.result;\n        mammoth.extractRawText({\n          arrayBuffer\n        }).then(result => resolve(result.value)).catch(reject);\n      } catch (error) {\n        reject(error);\n      }\n    };\n    reader.onerror = () => reject(reader.error);\n    reader.readAsArrayBuffer(file);\n  });\n};\nexport const parseResume = async file => {\n  let rawText;\n  try {\n    if (file.type === 'application/pdf') {\n      rawText = await extractTextFromPDF(file);\n    } else if (file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' || file.name.toLowerCase().endsWith('.docx')) {\n      rawText = await extractTextFromDOCX(file);\n    } else {\n      throw new Error('Unsupported file type. Please upload a PDF or DOCX file.');\n    }\n    const extractedData = extractFieldsFromText(rawText);\n    return {\n      ...extractedData,\n      rawText\n    };\n  } catch (error) {\n    throw new Error(`Failed to parse resume: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n};\nconst extractFieldsFromText = text => {\n  const data = {};\n\n  // Extract name (usually at the beginning, capitalize first)\n  const nameMatch = text.match(/^([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)/m);\n  if (nameMatch) {\n    data.name = nameMatch[1].trim();\n  }\n\n  // Extract email\n  const emailMatch = text.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/);\n  if (emailMatch) {\n    data.email = emailMatch[1].toLowerCase();\n  }\n\n  // Extract phone (various formats)\n  const phonePatterns = [/(\\+?1?[-.\\s]?)?\\(?([0-9]{3})\\)?[-.\\s]?([0-9]{3})[-.\\s]?([0-9]{4})/, /(\\+91[-.\\s]?)?([0-9]{5})[-.\\s]?([0-9]{5})/, /(\\+?[0-9]{1,3}[-.\\s]?)?[0-9]{3,4}[-.\\s]?[0-9]{3,4}[-.\\s]?[0-9]{3,4}/];\n  for (const pattern of phonePatterns) {\n    const phoneMatch = text.match(pattern);\n    if (phoneMatch) {\n      data.phone = phoneMatch[0].replace(/[-.\\s]/g, '').trim();\n      break;\n    }\n  }\n  return data;\n};","map":{"version":3,"names":["pdfjsLib","mammoth","GlobalWorkerOptions","workerSrc","version","extractTextFromPDF","file","Promise","resolve","reject","arrayBuffer","pdf","getDocument","data","promise","fullText","i","numPages","page","getPage","textContent","getTextContent","pageText","items","map","item","str","join","error","extractTextFromDOCX","reader","FileReader","onload","result","extractRawText","then","value","catch","onerror","readAsArrayBuffer","parseResume","rawText","type","name","toLowerCase","endsWith","Error","extractedData","extractFieldsFromText","message","text","nameMatch","match","trim","emailMatch","email","phonePatterns","pattern","phoneMatch","phone","replace"],"sources":["C:/swipe_Assessmentme/src/utils/resumeParser.ts"],"sourcesContent":["import * as pdfjsLib from 'pdfjs-dist';\r\nimport mammoth from 'mammoth';\r\nimport { ResumeData } from '../types';\r\n\r\n// Configure PDF.js worker\r\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\r\n\r\nexport const extractTextFromPDF = async (file: File): Promise<string> => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const arrayBuffer = await file.arrayBuffer();\r\n      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\r\n      \r\n      let fullText = '';\r\n      \r\n      for (let i = 1; i <= pdf.numPages; i++) {\r\n        const page = await pdf.getPage(i);\r\n        const textContent = await page.getTextContent();\r\n        const pageText = textContent.items\r\n          .map((item: any) => item.str)\r\n          .join(' ');\r\n        fullText += pageText + '\\n';\r\n      }\r\n      \r\n      resolve(fullText);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\nexport const extractTextFromDOCX = async (file: File): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onload = async () => {\r\n      try {\r\n        const arrayBuffer = reader.result as ArrayBuffer;\r\n        mammoth.extractRawText({ arrayBuffer })\r\n          .then((result) => resolve(result.value))\r\n          .catch(reject);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    };\r\n    reader.onerror = () => reject(reader.error);\r\n    reader.readAsArrayBuffer(file);\r\n  });\r\n};\r\n\r\nexport const parseResume = async (file: File): Promise<ResumeData> => {\r\n  let rawText: string;\r\n  \r\n  try {\r\n    if (file.type === 'application/pdf') {\r\n      rawText = await extractTextFromPDF(file);\r\n    } else if (\r\n      file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' ||\r\n      file.name.toLowerCase().endsWith('.docx')\r\n    ) {\r\n      rawText = await extractTextFromDOCX(file);\r\n    } else {\r\n      throw new Error('Unsupported file type. Please upload a PDF or DOCX file.');\r\n    }\r\n\r\n    const extractedData = extractFieldsFromText(rawText);\r\n    return {\r\n      ...extractedData,\r\n      rawText\r\n    };\r\n  } catch (error) {\r\n    throw new Error(`Failed to parse resume: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n  }\r\n};\r\n\r\nconst extractFieldsFromText = (text: string): Partial<ResumeData> => {\r\n  const data: Partial<ResumeData> = {};\r\n  \r\n  // Extract name (usually at the beginning, capitalize first)\r\n  const nameMatch = text.match(/^([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)/m);\r\n  if (nameMatch) {\r\n    data.name = nameMatch[1].trim();\r\n  }\r\n  \r\n  // Extract email\r\n  const emailMatch = text.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/);\r\n  if (emailMatch) {\r\n    data.email = emailMatch[1].toLowerCase();\r\n  }\r\n  \r\n  // Extract phone (various formats)\r\n  const phonePatterns = [\r\n    /(\\+?1?[-.\\s]?)?\\(?([0-9]{3})\\)?[-.\\s]?([0-9]{3})[-.\\s]?([0-9]{4})/,\r\n    /(\\+91[-.\\s]?)?([0-9]{5})[-.\\s]?([0-9]{5})/,\r\n    /(\\+?[0-9]{1,3}[-.\\s]?)?[0-9]{3,4}[-.\\s]?[0-9]{3,4}[-.\\s]?[0-9]{3,4}/\r\n  ];\r\n  \r\n  for (const pattern of phonePatterns) {\r\n    const phoneMatch = text.match(pattern);\r\n    if (phoneMatch) {\r\n      data.phone = phoneMatch[0].replace(/[-.\\s]/g, '').trim();\r\n      break;\r\n    }\r\n  }\r\n  \r\n  return data;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}