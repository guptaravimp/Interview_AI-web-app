{"ast":null,"code":"// Mock AI service for demo purposes\n// In production, you would integrate with actual AI APIs like OpenAI, Claude, etc.\n\nconst API_BASE_URL = process.env.REACT_APP_AI_API_URL || 'https://api.openai.com/v1';\nexport const generateQuestion = async request => {\n  // Mock implementation - replace with actual AI API call\n  const questions = {\n    easy: [{\n      text: \"What is React and what are its main advantages?\",\n      category: \"Frontend\",\n      expectedTopics: [\"Component-based\", \"Virtual DOM\", \"Reusable components\"]\n    }, {\n      text: \"Explain the difference between let, const, and var in JavaScript.\",\n      category: \"JavaScript\",\n      expectedTopics: [\"Scope\", \"Hoisting\", \"Block scope\", \"Function scope\"]\n    }],\n    medium: [{\n      text: \"How would you implement state management in a large React application? Discuss different approaches.\",\n      category: \"State Management\",\n      expectedTopics: [\"Redux\", \"Context API\", \"Zustand\", \"Performance considerations\"]\n    }, {\n      text: \"Explain the concept of closures in JavaScript and provide a practical example.\",\n      category: \"JavaScript\",\n      expectedTopics: [\"Lexical scope\", \"Function scope\", \"Memory management\", \"Use cases\"]\n    }],\n    hard: [{\n      text: \"Design a scalable architecture for a real-time chat application with millions of users.\",\n      category: \"System Design\",\n      expectedTopics: [\"WebSockets\", \"Load balancing\", \"Database scaling\", \"Message queues\", \"Caching\"]\n    }, {\n      text: \"Implement a custom React hook that manages complex form validation with async dependencies.\",\n      category: \"React Advanced\",\n      expectedTopics: [\"Custom hooks\", \"Form validation\", \"Async operations\", \"Error handling\", \"Performance\"]\n    }]\n  };\n  const categoryQuestions = questions[request.difficulty];\n  const randomQuestion = categoryQuestions[Math.floor(Math.random() * categoryQuestions.length)];\n  return {\n    ...randomQuestion,\n    difficulty: request.difficulty\n  };\n};\nexport const evaluateAnswer = async (question, answer, candidateBackground) => {\n  // Mock evaluation - replace with actual AI API call\n  const score = Math.floor(Math.random() * 40) + 60; // Random score between 60-100\n\n  const evaluations = {\n    high: {\n      feedback: \"Excellent answer! Shows deep understanding of the concepts.\",\n      strengths: [\"Clear explanation\", \"Good examples\", \"Technical depth\"],\n      improvements: [\"Could mention edge cases\", \"Consider scalability aspects\"]\n    },\n    medium: {\n      feedback: \"Good answer with room for improvement.\",\n      strengths: [\"Basic understanding\", \"Some relevant points\"],\n      improvements: [\"Needs more technical detail\", \"Consider practical applications\"]\n    },\n    low: {\n      feedback: \"Answer shows basic understanding but needs significant improvement.\",\n      strengths: [\"Attempted to answer\"],\n      improvements: [\"Study fundamental concepts\", \"Practice with examples\", \"Focus on practical applications\"]\n    }\n  };\n  let evaluation;\n  if (score >= 85) {\n    evaluation = evaluations.high;\n  } else if (score >= 70) {\n    evaluation = evaluations.medium;\n  } else {\n    evaluation = evaluations.low;\n  }\n  return {\n    score,\n    feedback: evaluation.feedback,\n    strengths: evaluation.strengths,\n    improvements: evaluation.improvements\n  };\n};\nexport const generateInterviewSummary = async (candidate, questions, answers) => {\n  // Mock summary generation\n  const scores = answers.map(a => a.score || 0).filter(s => s > 0);\n  const overallScore = scores.length > 0 ? Math.round(scores.reduce((a, b) => a + b, 0) / scores.length) : 0;\n  const summary = `\n    ${candidate.name} demonstrated ${overallScore >= 80 ? 'strong' : overallScore >= 60 ? 'moderate' : 'basic'} technical knowledge in the interview.\n    \n    Key observations:\n    - Answered ${answers.length} out of ${questions.length} questions\n    - Average score: ${overallScore}/100\n    - ${overallScore >= 80 ? 'Strong candidate with potential for the role' : overallScore >= 60 ? 'Decent candidate, may need some training' : 'Candidate needs significant skill development'}\n    \n    Recommendations:\n    ${overallScore >= 80 ? 'Proceed to next round' : overallScore >= 60 ? 'Consider with reservations' : 'Not recommended for this role'}\n  `;\n  return {\n    summary: summary.trim(),\n    overallScore\n  };\n};\n\n// Real AI integration example (uncomment and modify for production)\n/*\r\nexport const generateQuestionReal = async (request: QuestionGenerationRequest): Promise<AIQuestion> => {\r\n  try {\r\n    const response = await axios.post(`${API_BASE_URL}/chat/completions`, {\r\n      model: \"gpt-3.5-turbo\",\r\n      messages: [\r\n        {\r\n          role: \"system\",\r\n          content: `Generate a ${request.difficulty} level interview question for a full-stack developer position. \r\n                   Focus on ${request.category}. Return a JSON object with text, difficulty, category, and expectedTopics fields.`\r\n        }\r\n      ],\r\n      temperature: 0.7\r\n    }, {\r\n      headers: {\r\n        'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    return JSON.parse(response.data.choices[0].message.content);\r\n  } catch (error) {\r\n    console.error('Error generating question:', error);\r\n    throw new Error('Failed to generate question');\r\n  }\r\n};\r\n*/","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_AI_API_URL","generateQuestion","request","questions","easy","text","category","expectedTopics","medium","hard","categoryQuestions","difficulty","randomQuestion","Math","floor","random","length","evaluateAnswer","question","answer","candidateBackground","score","evaluations","high","feedback","strengths","improvements","low","evaluation","generateInterviewSummary","candidate","answers","scores","map","a","filter","s","overallScore","round","reduce","b","summary","name","trim"],"sources":["C:/swipe_Assessmentme/src/utils/aiService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { AIQuestion, QuestionGenerationRequest, AIEvaluation } from '../types';\r\n\r\n// Mock AI service for demo purposes\r\n// In production, you would integrate with actual AI APIs like OpenAI, Claude, etc.\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_AI_API_URL || 'https://api.openai.com/v1';\r\n\r\nexport const generateQuestion = async (request: QuestionGenerationRequest): Promise<AIQuestion> => {\r\n  // Mock implementation - replace with actual AI API call\r\n  const questions = {\r\n    easy: [\r\n      {\r\n        text: \"What is React and what are its main advantages?\",\r\n        category: \"Frontend\",\r\n        expectedTopics: [\"Component-based\", \"Virtual DOM\", \"Reusable components\"]\r\n      },\r\n      {\r\n        text: \"Explain the difference between let, const, and var in JavaScript.\",\r\n        category: \"JavaScript\",\r\n        expectedTopics: [\"Scope\", \"Hoisting\", \"Block scope\", \"Function scope\"]\r\n      }\r\n    ],\r\n    medium: [\r\n      {\r\n        text: \"How would you implement state management in a large React application? Discuss different approaches.\",\r\n        category: \"State Management\",\r\n        expectedTopics: [\"Redux\", \"Context API\", \"Zustand\", \"Performance considerations\"]\r\n      },\r\n      {\r\n        text: \"Explain the concept of closures in JavaScript and provide a practical example.\",\r\n        category: \"JavaScript\",\r\n        expectedTopics: [\"Lexical scope\", \"Function scope\", \"Memory management\", \"Use cases\"]\r\n      }\r\n    ],\r\n    hard: [\r\n      {\r\n        text: \"Design a scalable architecture for a real-time chat application with millions of users.\",\r\n        category: \"System Design\",\r\n        expectedTopics: [\"WebSockets\", \"Load balancing\", \"Database scaling\", \"Message queues\", \"Caching\"]\r\n      },\r\n      {\r\n        text: \"Implement a custom React hook that manages complex form validation with async dependencies.\",\r\n        category: \"React Advanced\",\r\n        expectedTopics: [\"Custom hooks\", \"Form validation\", \"Async operations\", \"Error handling\", \"Performance\"]\r\n      }\r\n    ]\r\n  };\r\n\r\n  const categoryQuestions = questions[request.difficulty];\r\n  const randomQuestion = categoryQuestions[Math.floor(Math.random() * categoryQuestions.length)];\r\n  \r\n  return {\r\n    ...randomQuestion,\r\n    difficulty: request.difficulty\r\n  };\r\n};\r\n\r\nexport const evaluateAnswer = async (\r\n  question: AIQuestion,\r\n  answer: string,\r\n  candidateBackground?: string\r\n): Promise<AIEvaluation> => {\r\n  // Mock evaluation - replace with actual AI API call\r\n  const score = Math.floor(Math.random() * 40) + 60; // Random score between 60-100\r\n  \r\n  const evaluations = {\r\n    high: {\r\n      feedback: \"Excellent answer! Shows deep understanding of the concepts.\",\r\n      strengths: [\"Clear explanation\", \"Good examples\", \"Technical depth\"],\r\n      improvements: [\"Could mention edge cases\", \"Consider scalability aspects\"]\r\n    },\r\n    medium: {\r\n      feedback: \"Good answer with room for improvement.\",\r\n      strengths: [\"Basic understanding\", \"Some relevant points\"],\r\n      improvements: [\"Needs more technical detail\", \"Consider practical applications\"]\r\n    },\r\n    low: {\r\n      feedback: \"Answer shows basic understanding but needs significant improvement.\",\r\n      strengths: [\"Attempted to answer\"],\r\n      improvements: [\"Study fundamental concepts\", \"Practice with examples\", \"Focus on practical applications\"]\r\n    }\r\n  };\r\n\r\n  let evaluation;\r\n  if (score >= 85) {\r\n    evaluation = evaluations.high;\r\n  } else if (score >= 70) {\r\n    evaluation = evaluations.medium;\r\n  } else {\r\n    evaluation = evaluations.low;\r\n  }\r\n\r\n  return {\r\n    score,\r\n    feedback: evaluation.feedback,\r\n    strengths: evaluation.strengths,\r\n    improvements: evaluation.improvements\r\n  };\r\n};\r\n\r\nexport const generateInterviewSummary = async (\r\n  candidate: {\r\n    name: string;\r\n    email: string;\r\n    background?: string;\r\n  },\r\n  questions: Array<{ text: string; difficulty: string }>,\r\n  answers: Array<{ answer: string; score?: number }>\r\n): Promise<{ summary: string; overallScore: number }> => {\r\n  // Mock summary generation\r\n  const scores = answers.map(a => a.score || 0).filter(s => s > 0);\r\n  const overallScore = scores.length > 0 ? Math.round(scores.reduce((a, b) => a + b, 0) / scores.length) : 0;\r\n  \r\n  const summary = `\r\n    ${candidate.name} demonstrated ${overallScore >= 80 ? 'strong' : overallScore >= 60 ? 'moderate' : 'basic'} technical knowledge in the interview.\r\n    \r\n    Key observations:\r\n    - Answered ${answers.length} out of ${questions.length} questions\r\n    - Average score: ${overallScore}/100\r\n    - ${overallScore >= 80 ? 'Strong candidate with potential for the role' : overallScore >= 60 ? 'Decent candidate, may need some training' : 'Candidate needs significant skill development'}\r\n    \r\n    Recommendations:\r\n    ${overallScore >= 80 ? 'Proceed to next round' : overallScore >= 60 ? 'Consider with reservations' : 'Not recommended for this role'}\r\n  `;\r\n\r\n  return {\r\n    summary: summary.trim(),\r\n    overallScore\r\n  };\r\n};\r\n\r\n// Real AI integration example (uncomment and modify for production)\r\n/*\r\nexport const generateQuestionReal = async (request: QuestionGenerationRequest): Promise<AIQuestion> => {\r\n  try {\r\n    const response = await axios.post(`${API_BASE_URL}/chat/completions`, {\r\n      model: \"gpt-3.5-turbo\",\r\n      messages: [\r\n        {\r\n          role: \"system\",\r\n          content: `Generate a ${request.difficulty} level interview question for a full-stack developer position. \r\n                   Focus on ${request.category}. Return a JSON object with text, difficulty, category, and expectedTopics fields.`\r\n        }\r\n      ],\r\n      temperature: 0.7\r\n    }, {\r\n      headers: {\r\n        'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    return JSON.parse(response.data.choices[0].message.content);\r\n  } catch (error) {\r\n    console.error('Error generating question:', error);\r\n    throw new Error('Failed to generate question');\r\n  }\r\n};\r\n*/\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}