{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  chatSessions: {}\n};\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    initializeChat: (state, action) => {\n      const candidateId = action.payload;\n      if (!state.chatSessions[candidateId]) {\n        state.chatSessions[candidateId] = {\n          candidateId,\n          messages: [],\n          isWaitingForField: undefined\n        };\n      }\n    },\n    addMessage: (state, action) => {\n      const {\n        candidateId,\n        message\n      } = action.payload;\n      if (state.chatSessions[candidateId]) {\n        state.chatSessions[candidateId].messages.push(message);\n      }\n    },\n    setWaitingForField: (state, action) => {\n      const {\n        candidateId,\n        field\n      } = action.payload;\n      if (state.chatSessions[candidateId]) {\n        state.chatSessions[candidateId].isWaitingForField = field;\n      }\n    },\n    clearChat: (state, action) => {\n      const candidateId = action.payload;\n      if (state.chatSessions[candidateId]) {\n        state.chatSessions[candidateId].messages = [];\n        state.chatSessions[candidateId].isWaitingForField = undefined;\n      }\n    },\n    updateMessage: (state, action) => {\n      const {\n        candidateId,\n        messageId,\n        updates\n      } = action.payload;\n      if (state.chatSessions[candidateId]) {\n        const messageIndex = state.chatSessions[candidateId].messages.findIndex(m => m.id === messageId);\n        if (messageIndex !== -1) {\n          state.chatSessions[candidateId].messages[messageIndex] = {\n            ...state.chatSessions[candidateId].messages[messageIndex],\n            ...updates\n          };\n        }\n      }\n    }\n  }\n});\nexport const {\n  initializeChat,\n  addMessage,\n  setWaitingForField,\n  clearChat,\n  updateMessage\n} = chatSlice.actions;\nexport default chatSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","chatSessions","chatSlice","name","reducers","initializeChat","state","action","candidateId","payload","messages","isWaitingForField","undefined","addMessage","message","push","setWaitingForField","field","clearChat","updateMessage","messageId","updates","messageIndex","findIndex","m","id","actions","reducer"],"sources":["C:/swipe_Assessmentme/src/store/slices/chatSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Message, ChatSession } from '../../types';\r\n\r\ninterface ChatState {\r\n  chatSessions: { [candidateId: string]: ChatSession };\r\n}\r\n\r\nconst initialState: ChatState = {\r\n  chatSessions: {}\r\n};\r\n\r\nconst chatSlice = createSlice({\r\n  name: 'chat',\r\n  initialState,\r\n  reducers: {\r\n    initializeChat: (state, action: PayloadAction<string>) => {\r\n      const candidateId = action.payload;\r\n      if (!state.chatSessions[candidateId]) {\r\n        state.chatSessions[candidateId] = {\r\n          candidateId,\r\n          messages: [],\r\n          isWaitingForField: undefined\r\n        };\r\n      }\r\n    },\r\n    addMessage: (state, action: PayloadAction<{ candidateId: string; message: Message }>) => {\r\n      const { candidateId, message } = action.payload;\r\n      if (state.chatSessions[candidateId]) {\r\n        state.chatSessions[candidateId].messages.push(message);\r\n      }\r\n    },\r\n    setWaitingForField: (state, action: PayloadAction<{ candidateId: string; field?: string }>) => {\r\n      const { candidateId, field } = action.payload;\r\n      if (state.chatSessions[candidateId]) {\r\n        state.chatSessions[candidateId].isWaitingForField = field;\r\n      }\r\n    },\r\n    clearChat: (state, action: PayloadAction<string>) => {\r\n      const candidateId = action.payload;\r\n      if (state.chatSessions[candidateId]) {\r\n        state.chatSessions[candidateId].messages = [];\r\n        state.chatSessions[candidateId].isWaitingForField = undefined;\r\n      }\r\n    },\r\n    updateMessage: (state, action: PayloadAction<{ candidateId: string; messageId: string; updates: Partial<Message> }>) => {\r\n      const { candidateId, messageId, updates } = action.payload;\r\n      if (state.chatSessions[candidateId]) {\r\n        const messageIndex = state.chatSessions[candidateId].messages.findIndex(m => m.id === messageId);\r\n        if (messageIndex !== -1) {\r\n          state.chatSessions[candidateId].messages[messageIndex] = {\r\n            ...state.chatSessions[candidateId].messages[messageIndex],\r\n            ...updates\r\n          };\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nexport const {\r\n  initializeChat,\r\n  addMessage,\r\n  setWaitingForField,\r\n  clearChat,\r\n  updateMessage\r\n} = chatSlice.actions;\r\n\r\nexport default chatSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAO7D,MAAMC,YAAuB,GAAG;EAC9BC,YAAY,EAAE,CAAC;AACjB,CAAC;AAED,MAAMC,SAAS,GAAGH,WAAW,CAAC;EAC5BI,IAAI,EAAE,MAAM;EACZH,YAAY;EACZI,QAAQ,EAAE;IACRC,cAAc,EAAEA,CAACC,KAAK,EAAEC,MAA6B,KAAK;MACxD,MAAMC,WAAW,GAAGD,MAAM,CAACE,OAAO;MAClC,IAAI,CAACH,KAAK,CAACL,YAAY,CAACO,WAAW,CAAC,EAAE;QACpCF,KAAK,CAACL,YAAY,CAACO,WAAW,CAAC,GAAG;UAChCA,WAAW;UACXE,QAAQ,EAAE,EAAE;UACZC,iBAAiB,EAAEC;QACrB,CAAC;MACH;IACF,CAAC;IACDC,UAAU,EAAEA,CAACP,KAAK,EAAEC,MAAgE,KAAK;MACvF,MAAM;QAAEC,WAAW;QAAEM;MAAQ,CAAC,GAAGP,MAAM,CAACE,OAAO;MAC/C,IAAIH,KAAK,CAACL,YAAY,CAACO,WAAW,CAAC,EAAE;QACnCF,KAAK,CAACL,YAAY,CAACO,WAAW,CAAC,CAACE,QAAQ,CAACK,IAAI,CAACD,OAAO,CAAC;MACxD;IACF,CAAC;IACDE,kBAAkB,EAAEA,CAACV,KAAK,EAAEC,MAA8D,KAAK;MAC7F,MAAM;QAAEC,WAAW;QAAES;MAAM,CAAC,GAAGV,MAAM,CAACE,OAAO;MAC7C,IAAIH,KAAK,CAACL,YAAY,CAACO,WAAW,CAAC,EAAE;QACnCF,KAAK,CAACL,YAAY,CAACO,WAAW,CAAC,CAACG,iBAAiB,GAAGM,KAAK;MAC3D;IACF,CAAC;IACDC,SAAS,EAAEA,CAACZ,KAAK,EAAEC,MAA6B,KAAK;MACnD,MAAMC,WAAW,GAAGD,MAAM,CAACE,OAAO;MAClC,IAAIH,KAAK,CAACL,YAAY,CAACO,WAAW,CAAC,EAAE;QACnCF,KAAK,CAACL,YAAY,CAACO,WAAW,CAAC,CAACE,QAAQ,GAAG,EAAE;QAC7CJ,KAAK,CAACL,YAAY,CAACO,WAAW,CAAC,CAACG,iBAAiB,GAAGC,SAAS;MAC/D;IACF,CAAC;IACDO,aAAa,EAAEA,CAACb,KAAK,EAAEC,MAA4F,KAAK;MACtH,MAAM;QAAEC,WAAW;QAAEY,SAAS;QAAEC;MAAQ,CAAC,GAAGd,MAAM,CAACE,OAAO;MAC1D,IAAIH,KAAK,CAACL,YAAY,CAACO,WAAW,CAAC,EAAE;QACnC,MAAMc,YAAY,GAAGhB,KAAK,CAACL,YAAY,CAACO,WAAW,CAAC,CAACE,QAAQ,CAACa,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKL,SAAS,CAAC;QAChG,IAAIE,YAAY,KAAK,CAAC,CAAC,EAAE;UACvBhB,KAAK,CAACL,YAAY,CAACO,WAAW,CAAC,CAACE,QAAQ,CAACY,YAAY,CAAC,GAAG;YACvD,GAAGhB,KAAK,CAACL,YAAY,CAACO,WAAW,CAAC,CAACE,QAAQ,CAACY,YAAY,CAAC;YACzD,GAAGD;UACL,CAAC;QACH;MACF;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXhB,cAAc;EACdQ,UAAU;EACVG,kBAAkB;EAClBE,SAAS;EACTC;AACF,CAAC,GAAGjB,SAAS,CAACwB,OAAO;AAErB,eAAexB,SAAS,CAACyB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}